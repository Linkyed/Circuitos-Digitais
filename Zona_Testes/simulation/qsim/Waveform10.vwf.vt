// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/04/2023 13:36:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decod_Matriz
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decod_Matriz_vlg_vec_tst();
// constants                                           
// general purpose registers
reg B1;
reg B2;
reg LSB1;
reg LSB2;
reg MSB1;
reg MSB2;
// wires                                               
wire MLed0;
wire MLed2;
wire MLed3;
wire MLed4;
wire MLed5;
wire MLed6;

// assign statements (if any)                          
decod_Matriz i1 (
// port map - connection between master ports and signals/registers   
	.B1(B1),
	.B2(B2),
	.LSB1(LSB1),
	.LSB2(LSB2),
	.MLed0(MLed0),
	.MLed2(MLed2),
	.MLed3(MLed3),
	.MLed4(MLed4),
	.MLed5(MLed5),
	.MLed6(MLed6),
	.MSB1(MSB1),
	.MSB2(MSB2)
);
initial 
begin 
#640000 $finish;
end 

// LSB1
always
begin
	LSB1 = 1'b0;
	LSB1 = #10000 1'b1;
	#10000;
end 

// B1
always
begin
	B1 = 1'b0;
	B1 = #20000 1'b1;
	#20000;
end 

// MSB1
always
begin
	MSB1 = 1'b0;
	MSB1 = #40000 1'b1;
	#40000;
end 

// LSB2
always
begin
	LSB2 = 1'b0;
	LSB2 = #80000 1'b1;
	#80000;
end 

// B2
always
begin
	B2 = 1'b0;
	B2 = #160000 1'b1;
	#160000;
end 

// MSB2
always
begin
	MSB2 = 1'b0;
	MSB2 = #320000 1'b1;
	#320000;
end 
endmodule

